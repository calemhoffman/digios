#!/bin/bash -l
echo "#############################################"
echo "#     Set-up for new Experiment"
echo "#############################################"

#daqDataPath=/media/DIGIOSDATA5

#echo ""
#echo -e "daqDataPath : \033[0;91m"${daqDataPath}"\033[0m"
#echo    "Don't change the expName.sh, change the SetUpNewExp."
#echo ""
echo "============================================="
echo " The bach script do following things "
echo " 1) git-fetch  "
echo " 2) check repository is clean"
echo " 3) check disk space"
echo " 4) check is git branch exist"
echo "    branch exist --> git checkout "
echo "    branch not exist --> create expName.sh"
echo " 5) making directories for data, merged_data, root_data"
echo " 6) create symbolic links to data, merged_data, root_data"
echo " 7) Tell Database SetupNewExp change exp."
echo " 8) Edit Monitors.html"
echo " 9) if branch not exist --> clean up files, and git push"
echo "============================================="

#set git merge driver
git config --global merge.ours.driver true

expName=$1

if [ $# -ne 0 ]; then
    if [ ${expName} == "master" ] || [ ${expName} == "Master" ] ; then
	expName="ARR01"
    fi
fi
    
echo -e "--- Git Fetch"
echo "when password is needed, please edit .git/config"
git fetch

echo -e "--- Checking git repository is clean or not...."
gitCheck=`git status --porcelain --untracked-files=no | wc -l`
if [ ${gitCheck} -eq 0 ]; then
    echo "---- clean."
else
    git status
    echo -e "\033[0;93m=============== Please fix the git status \033[0m"
    exit
fi

if [ $# -eq 0 ]; then
   git branch -a
   read -p 'Enter the new experiment name: ' expName    
fi

if [ ${expName} == "master" ] || [ ${expName} == "Master" ] ; then
   expName="ARR01"
   echo -e "----------- new experiment name : \033[0;31m${expName}\033[0m = master"
else
   echo -e "----------- new experiment name : \033[0;31m${expName}\033[0m"
fi

Arch="$(uname -s)"
PCName="$(hostname)"

#------ Set up data folder, check disk space
echo "=================== Checking disk space."
echo "PC name  : ${PCName}"
echo "Archetech: ${Arch}"

if [ ${Arch} == "Linux" ]; then 

    if [ ${PCName} == "digios1" ]; then  #DAQ

	echo -e "\e[93m================= avalible disk:\033[0m"
	df -hT |grep "/media\|File"
	read -p "================= choose disk [e.g. sdb]:" disk

	daqDataPath=`df | grep ${disk} | awk '{print $6}'`
	if [ -z ${daqDataPath} ]; then
	    echo  -e "\033[0;31m no disk name with ${disk} is found. abort.\033[0m"
	    exit
	fi
	
	echo -e "set daqDataPath = \e[93m"${daqDataPath}"\033[0m"

        DATAPATH=${daqDataPath}
        expDIR=~/digios
        
        space=`df -ml | grep ${DATAPATH} | awk '{print $4}'` #in mb
        spacePrecent=`df -ml | tail -1 | awk '{print $5}'`
        spacePrecent="${spacePrecent:0:2}"
        echo "Free Space : ${space} MB |  ${spacePrecent}%-used"


    elif [ ${PCName:0:5} == "bebop" ]; then #LCRC-Bebop

        echo -e "\e[93m In LCRC, better to use the master branch."
        echo -e "\e[93m 1) Change the expName in expName.sh"
        echo -e "\e[93m 2) Run MakeDataLinks to create symbolic link to data"

        exit
    fi

elif [ ${Arch} == "Darwin" ]; then

    if [ ${PCName:0:12} == "helioss-iMac" ] || [ ${PCName:0:5} == "phywl" ] ;  then #MAC
        DATAPATH=~/experiments
        expDIR=~/digios

        space=`df -ml | grep "/dev/disk1s2" | awk '{print $4}'` #in mb
        spacePrecent=`df -ml | grep "/dev/disk1s2" | awk '{print $5}'`
        spacePrecent="${spacePrecent//%/}"
        spacePrecent=$((100-spacePrecent))
        echo "Free Space : ${space} MB |  ${spacePrecent}%-free"

    else
    
        path=$(pwd)
        read -p "Please enter absolute DATAPATH (e.g. ${path}) " DATAPATH
        echo "DATAPATH for    raw data : ${DATAPATH}/${expName}/data"
        echo "DATAPATH for merged_data : ${DATAPATH}/${expName}/merged_data"
        echo "DATAPATH for   root_data : ${DATAPATH}/${expName}/root_data"   
        
    fi
    
else
   path=$(pwd)
   read -p "Please enter absolute DATAPATH (e.g. ${path}) " DATAPATH
   echo "DATAPATH for    raw data : ${DATAPATH}/${expName}/data"
   echo "DATAPATH for merged_data : ${DATAPATH}/${expName}/merged_data"
   echo "DATAPATH for   root_data : ${DATAPATH}/${expName}/root_data"   

   space=`df -ml | tail -1 | awk '{print $4}'` #in mb
   spacePrecent=`df -ml | tail -1 | awk '{print $5}'`
   spacePrecent="${spacePrecent:0:2}"
   echo "Free Space : ${space} MB |  ${spacePrecent}%-free"

fi

if [ ${space} -le 512000 ]; then
   echo "The avalible space is less then 500 GB."
   read -p  '-------------------------- Continue? (Y/N) ' OKFlag
   
   if [ ${OKFlag} == "N" ]; then
      echo "xxxxxxxxxxxxxx Abort SetUpNewExp"
      exit
   fi
fi


#------ check is there any GIt branch in repository, 
#       if not create Git Branch, if yes, checkout
echo "=================== Checking/Create Git Branch"
pullFlag="K"
isBranchExist=`git branch -a | grep ${expName} | wc -l`
if [ ${expName} == "ARR01" ]; then
   echo "this is master experiment name. no branch create."
   git checkout master
   isBranchExist=1
else

   if [ ${isBranchExist} -eq 0 ]; then
       git checkout -b ${expName}
   else
       echo "Experimental Name (${expName}) already in use."
       echo "Please take another name or git pull origin ${expName}"
       read -p "Do you want to checkout origin/${expName} (Y/N):"  pullFlag
       if [ ${pullFlag} == "N" ]; then
	   exit
       else
	        git checkout ${expName}
       fi
   fi
fi

#------ set up expName.sh, so that all experimental Name is refered to this name
if [ ${isBranchExist} -eq 0 ]; then
    DigiosDir="$(pwd)"
    echo "=================== Setting up ${DigiosDir}/expName.sh"
    touch ${DigiosDir}/expName.sh
    echo "#!/bin/bash -l" > ${DigiosDir}/expName.sh
    echo "expName=${expName}" >> ${DigiosDir}/expName.sh
    echo "daqDataPath=${daqDataPath}" >> ${DigiosDir}/expName.sh
    echo "LastRunNum=0" >> ${DigiosDir}/expName.sh
fi

echo "=================== making new folders in ${DATAPATH}/${expName} and creating symoblic link"

if [ ${PCName} == "digios1" ]; then  #DAQ

    Data=${DATAPATH}/${expName}

    mkdir -v ${DATAPATH}/${expName}
    mkdir -v ${Data}

    rm -f ${expDIR}/analysis/data

    ln -sfv ${Data} ${expDIR}/analysis/data

else

    Data=${DATAPATH}/${expName}/data
    mergedData=${DATAPATH}/${expName}/merged_data
    rootData=${DATAPATH}/${expName}/root_data

    mkdir -v ${DATAPATH}/${expName}
    mkdir -v ${Data}
    mkdir -v ${mergedData}
    mkdir -v ${rootData}

    rm -f ${expDIR}/analysis/data
    rm -f ${expDIR}/analysis/merged_data
    rm -f ${expDIR}/analysis/root_data

    ln -sfv ${Data} ${expDIR}/analysis/data
    ln -sfv ${mergedData} ${expDIR}/analysis/merged_data
    ln -sfv ${rootData} ${expDIR}/analysis/root_data

    #===== tell Database SetupNewExp change exp.
    echo "=================== Tell the database"

    source ${expDIR}/daq/edm/scripts/DataBaseAddress.sh

    curl -s -XPOST "http://"${dataBaseAddress}":8086/write?db=testing" --data-binary "SavingData,expName=${expName} value=0" --max-time 1 --connect-timeout 1

    echo "=================== done."

    #===== Modify Monitors.html

    if [ ${expName} == "ARR01" ]; then
        capExpName="ARR01"
    else
        capExpName="H"${expName:1}
    fi

    if [ ${Arch} == "Linux" ]; then 
        echo "in Linux machine, no need to change Monitors.html."
    elif [ ${Arch} == "Darwin" ]; then
        if [ ${PCName:0:12} == "helioss-iMac" ] || [ ${PCName:0:5} == "phywl" ] ;  then #MAC
            sed -i '' "s/expName/${capExpName}/g" ${expDIR}/analysis/working/Monitors.html
        else
            echo "Not in the MAC2020, no need to change Monitors.html."
        fi
    fi

    #===== clean up working if it is new
    if [ ${isBranchExist} -eq 0 ]; then

        echo "======== Clean up working directory "
        #rm -fv ${expDIR}/analysis/working/correction_*.dat
        rm -fv ${expDIR}/analysis/working/reaction.dat
        rm -fv ${expDIR}/analysis/working/run_Summary.dat
        rm -fv ${expDIR}/analysis/working/example.*
        rm -fv ${expDIR}/analysis/working/RunTimeStamp.dat
        rm -fv ${expDIR}/analysis/working/*.root
        rm -fv ${expDIR}/analysis/working/*.d
        rm -fv ${expDIR}/analysis/working/*.so
        rm -fv ${expDIR}/analysis/working/*.pcm

        echo "======== git commit "
        git add -A
        git commit -m "new experiment ${expName}"

        echo "======== git push "
        git push origin ${expName}

    fi 

fi



