#!/bin/bash

if [ $# -eq 0 ] || [ $1 == "-help"  ]; then
  echo "$./process_run [RunNum] [EventBuild] [Monitor] <SaveTrace>"
  echo "     RunNum = run number / \"lastRun\" "
  echo " EventBuild = 0/1/n/100  ||    0 = no EventBld, 1 = EventBld, n > 1 = EventBld with trace"
  echo "   Monitors = 0/1/2      ||    1 = single run,  2 = using the list in ChainMonitors.C"
  echo "                              10 = single run and post to websrv, 20 = list runs and post to websrv"
  echo " SaveTrace = 0/1         ||    0 = no trace, 1 = save trace. with trace analysis trace always saved disregard this option"
  echo ""
  exit 1
fi;

RUN=$1

isBuild=0
isMonitor=0
isSaveTrace=0

traceFlag=false

buildMsg=", default event buiding with no trace analysis"
monitorMsg=", default with monitoring"
saveTraceMsg=", default with no trace saving"

if [ $# -ge 2 ]; then 
  isBuild=$2; 
  isMonitor=1;
fi

if [ $# -ge 3 ]; then 
  isMonitor=$3; 
  monitorMsg=", with monitoring (manually))";
fi
if [ $# -ge 4 ]; then isSaveTrace=$4; fi

if [ $# -eq 1 ]; then
  isBuild=1
  isMonitor=1
  isSaveTrace=0
fi

if [ ${isBuild} -eq -1 ]; then
  buildMsg=", force event building by user (no trace analysis)"
fi

if [ ${isSaveTrace} -eq 1 ]; then
  saveTraceMsg=", trace is saved"
fi

if [ ${isBuild} -ge 2 ] || [ ${isBuild} -le -2 ] ; then
  isSaveTrace=1
  traceFlag=true
  buildMsg=", with trace analysis"
  if [ ${isBuild} -le -2 ]; then
    buildMsg=", force event building with trace analysis "
  fi
  saveTraceMsg=", overrided with trace analysis"
fi

if [ ${isMonitor} -eq 0 ]; then monitorMsg=", no monitoring"; fi
if [ ${isMonitor} -eq 10 ]; then
  monitorMsg=", with monitoring and post to websrv"
elif [ ${isMonitor} -eq 20 ]; then
  monitorMsg=", with monitoring and post to websrv for all runs"
fi

if [ "${RUN}" == "lastRun" ]; then 
  source ../Armory/process_PathSetting
  IP=192.168.1.2
  rsync -avuht --progress "helios@${IP}:${daqDir}/expName.sh" ${AnalysisDir}/../.
  RUN=${LastRunNum}
fi

#remove any zero
if [ "${RUN:0:2}" == "00" ]; then
    RUN=${RUN:2:1}
elif [ "${RUN:0:1}" == "0" ]; then
    RUN=${RUN:1:2}
else
    RUN=$(printf '%d' $RUN)
fi

runID=$(printf '%03d' $RUN)

echo -e "\033[1;31m============================================================================"
echo -e "=============================== RUN $runID ===================================="
echo -e "============================================================================\033[0m"

echo "isBuild     : ${isBuild}${buildMsg}"
echo "isMonitor   : ${isMonitor}${monitorMsg}"
echo "isSaveTrace : ${isSaveTrace}${saveTraceMsg}"
echo "============================================="


#######################################
####################  Download raw data
../Armory/process_Download $RUN

#######################################
#################### EventBuild and GeneralSort
../Armory/process_Sort $RUN $isBuild $isSaveTrace

########################################
#################### Monitor

if [ $isMonitor -eq 1 ] ; then
  root -l "ChainMonitors.C($RUN, -1, false, ${traceFlag})" # single run
elif [ $isMonitor -eq 2 ] ; then
  root -l "ChainMonitors.C(-1,-1, false, ${traceFlag})"  #all runs listed 
elif [ $isMonitor -eq 20 ] ; then
  root -l "ChainMonitors.C(-1,-1, true, ${traceFlag})"
elif [ $isMonitor -eq 10 ] ; then
  root -l "ChainMonitors.C(${RUN},-1, true, ${traceFlag})"  
fi  

  
exit 1
